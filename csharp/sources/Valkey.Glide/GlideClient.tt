<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.ComponentModel;
using Valkey.Glide.InterOp;
using Valkey.Glide.InterOp.Native;

namespace Valkey.Glide;

public sealed class GlideClient : IDisposable, IGlideClient
{
    private readonly GlideTransformer _glideTransformer;
    private readonly INativeClient _nativeClient;
    private readonly bool          _ownsNativeClient;

    public GlideClient(INativeClient nativeClient, GlideTransformer glideTransformer)
    {
        _nativeClient     = nativeClient;
        _ownsNativeClient = false;
        _glideTransformer = glideTransformer;
    }

    public GlideClient(InterOp.ConnectionRequest connectionRequest, GlideTransformer glideTransformer)
    {
        _nativeClient     = new NativeClient(connectionRequest);
        _ownsNativeClient = true;
        _glideTransformer = glideTransformer;
    }

    /// <inheritdoc />
    public void Dispose()
    {
        if (_ownsNativeClient)
            ((NativeClient) _nativeClient).Dispose();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public Task<InterOp.Value> CommandAsync(ERequestType requestType, params string[] args)
        => _nativeClient.SendCommandAsync(requestType, args);
}
